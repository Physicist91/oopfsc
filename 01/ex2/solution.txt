The bugs documented here have been fixed in the source codes
The original (buggy lines) have been commented.

Bug 1: in "matrix_broken.h"
In "Matrix::Matrix(int numRows_, int numCols_, double value)"
In line: resize(value,numRows,numCols);
Corrected: resize(numRows_, numCols_, value);
How it was found: in GDB, p A.rows() and p A.cols() do not match the dimensions (4, 6)

Bug 2: in "matrix_broken.cc"
In function "void Matrix::print() const"
In line: std::cout << std::setw(5) << entries[j][i] << " ";
Corrected: std::cout << std::setw(5) << entries[i][j] << " ";
How it was found: received seg fault here, so in GDB i stepped through this print() function

Bug 3: in "matrix_broken.h"
In "Matrix::Matrix(const Matrix& b)"
Missing a line: entries = b.entries;
How it was found:
* running A = 2 * C gives seg fault
* running C.print() also produces seg fault
* root cause: the vector entries are not initialized here

Bug 4: in "matrix_broken.cc"
In "std::vector<double> operator*(const Matrix& a,
                              const std::vector<double>& x)"
In lines:
for (int j = 0; j <= a.cols(); ++j)
for (int i = 0; i <= a.rows(); ++i)

Corrected:
for (int i = 0; i < a.rows(); ++i)
for (int j = 0; j < a.cols(); ++j)

How it was found:
Another segmentation fault when evaluating std::vector<double>x = A * b;
I stepped into this function from GDB and noticed this out-of-bounds access

Bug 5: in "Matrix(int numRows_, int numCols_)"
In line: entries(numRows_), numRows(numRows), numCols(numCols_)
Corrected: entries(numRows_), numRows(numRows_), numCols(numCols_)
How it was found: warnings generated by compiler. A test for this bug would
call the Matrix constructor with only two ints as arguments, then print the
dimensions of the matrix.

The specific choices of the matrices in the testmatrix.cc do not cover all
possible arguments, e.g. with two ints or with one int.
